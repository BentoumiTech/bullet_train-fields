{"version":3,"file":"fields.js","sources":["../../javascript/controllers/fields/button_toggle_controller.js","../../javascript/controllers/fields/cloudinary_image_controller.js","../../javascript/controllers/fields/color_picker_controller.js"],"sourcesContent":["import { Controller } from \"stimulus\"\n\nexport default class extends Controller {\n  static targets = [ \"shadowField\" ]\n\n  clickShadowField(event) {\n    // we have to stop safari from doing what we originally expected.\n    event.preventDefault();\n\n    // then we need to manually click the hidden checkbox or radio button ourselves.\n    this.shadowFieldTarget.click()\n  }\n}","import { Controller } from \"stimulus\"\n\nexport default class extends Controller {\n  static targets = [ \"uploadButton\", \"hiddenField\", \"thumbnail\" ]\n  static values = { \n    signaturesUrl: String,\n    height: Number,\n    width: Number,\n    cloudName: String,\n    apiKey: String,\n    googleApiKey: String,\n    urlFormat: String,\n    sources: String,\n    searchByRights: Boolean\n  }\n  static classes = [ \"thumbnailShown\" ]\n\n  pickImageAndUpload(event) {\n    // don't submit the form.\n    event.preventDefault()\n\n    // prepare the list of default sources a user can upload an image from.\n    var defaultSources = ['local', 'url', 'camera']\n    if (this.hasGoogleApiKeyValue) {\n      defaultSources.push('image_search')\n    }\n\n    // configure cloudinary's uploader's options.\n    // many of these are configurable at the point where the `shared/fields/cloudinary_image` partial is included.\n    var options = {\n      cloud_name: this.cloudNameValue,\n      apiKey: this.apiKeyValue,\n      upload_preset: this.uploadPresetValue,\n      upload_signature: this.getCloudinarySignature.bind(this),\n      multiple: false,\n      sources: this.hasSourcesValue ? this.sourcesValue.split(',') : defaultSources,\n      search_by_rights: this.hasSearchByRightsValue && this.searchByRightsValue === false ? false : true // default to true.\n    }\n    \n    if (this.hasGoogleApiKeyValue) {\n      options['google_api_key'] = this.googleApiKeyValue\n    }\n    \n    // open cloudinary's upload widget.\n    cloudinary.openUploadWidget(options, this.handleWidgetResponse.bind(this))\n  }\n  \n  clearImage(event) {\n    // don't submit the form.\n    event.preventDefault()\n\n    // clear the cloudinary id.\n    this.hiddenFieldTarget.value = null\n    \n    // remove any existing image from the button.\n    this.removeThumbnail()\n  }\n  \n  getCloudinarySignature(callback, paramsToSign) {\n    $.ajax({\n      url: this.signaturesUrlValue,\n      type: \"GET\",\n      dataType: \"text\",\n      data: {data: paramsToSign},\n      complete: function() { console.log(\"complete\") },\n      success: function(signature, textStatus, xhr) { callback(signature) },\n      error: function(xhr, status, error) { console.log(xhr, status, error) }\n    })\n  }\n  \n  handleWidgetResponse(error, response) {\n    // after the user has successfully uploaded a single file ..\n    if (!error && response && response.event === \"success\") { \n      const data = response.info\n      \n      // update the cloudinary id field in the form.\n      this.hiddenFieldTarget.value = data.public_id\n\n      // remove any existing image.\n      this.removeThumbnail()\n\n      // generate a new image preview url.\n      this.addThumbnail(this.urlFormatValue.replace('CLOUDINARY_ID', data.public_id))\n    }\n  }\n  \n  addThumbnail(url) {\n    var $imageElement = $(`<img src=\"${url}\" width=\"${this.widthValue}\" height=\"${this.heightValue}\" data-${this.identifier}-target=\"thumbnail\" />`)\n    $(this.uploadButtonTarget).prepend($imageElement)\n\n    // mark the image as present.\n    this.uploadButtonTarget.classList.add(this.thumbnailShownClass)\n  }\n  \n  removeThumbnail() {\n    if (!this.hasThumbnailTarget) { return }\n    this.uploadButtonTarget.removeChild(this.thumbnailTarget)\n    this.uploadButtonTarget.classList.remove(this.thumbnailShownClass)\n  }\n}\n","import { Controller } from \"stimulus\"\nimport '@simonwep/pickr/dist/themes/monolith.min.css'\n\nimport Pickr from '@simonwep/pickr';\n\nexport default class extends Controller {\n  static targets = [ \"colorPickerValue\", \"colorField\", \"colorInput\", \"userSelectedColor\", \"colorOptions\" ];\n  static values = { initialColor: String }\n\n  connect() {\n    this.initPluginInstance()\n    this.colorOptions = $(this.colorOptionsTarget).find('button').map(function (_, button) { return $(button).attr('data-color'); }).get()\n  }\n\n  disconnect() {\n    this.teardownPluginInstance()\n  }\n\n  pickColor(event) {\n    event.preventDefault();\n\n    const targetEl = event.target;\n    const color = targetEl.dataset.color;\n\n    $(this.colorInputTarget).val(color);\n    $(this.colorPickerValueTarget).val(color);\n    $(this.userSelectedColorTarget).data('color', color);\n    $('.button-color').removeClass('ring-2 ring-offset-2');\n\n    this.pickr.setColor(color);\n\n    targetEl.classList.add('ring-2', 'ring-offset-2');\n  }\n\n  pickRandomColor(event) {\n    event.preventDefault();\n\n    const r = Math.floor(Math.random() * 256);\n    const g = Math.floor(Math.random() * 256);\n    const b = Math.floor(Math.random() * 256);\n\n    this.pickr.setColor(`rgb ${r} ${g} ${b}`);\n    const hexColor = this.pickr.getColor().toHEXA().toString();\n    this.pickr.setColor(hexColor);\n\n    this.showUserSelectedColor(hexColor);\n  }\n\n  showUserSelectedColor(color) {\n    $(this.colorInputTarget).val(color);\n    $(this.colorPickerValueTarget).val(color);\n\n    $('.button-color').removeClass('ring-2 ring-offset-2');\n\n    $(this.userSelectedColorTarget)\n      .addClass('ring-2')\n      .addClass('ring-offset-2')\n      .css('background-color', color)\n      .css('--tw-ring-color', color)\n      .attr('data-color', color)\n      .show();\n  }\n\n  unpickColor(event) {\n    event.preventDefault();\n    $(this.colorPickerValueTarget).val('');\n    $(this.colorInputTarget).val('');\n    $(this.userSelectedColorTarget).hide();\n    $('.button-color').removeClass('ring-2 ring-offset-2');\n  }\n\n  togglePickr(event) {\n    event.preventDefault();\n  }\n\n  initPluginInstance() {\n    this.pickr = Pickr.create({\n      el: '.btn-pickr',\n      theme: 'monolith',\n      useAsButton: true,\n      default: this.initialColorValue || '#1E90FF',\n      components: {\n        // Main components\n        preview: true,\n        hue: true,\n\n        // Input / output Options\n        interaction: {\n          input: true,\n          save: true,\n        },\n      }\n    });\n\n    this.pickr.on('save', (color, _instance) => {\n      const hexaColor = color.toHEXA().toString()\n      if (!this.colorOptions.includes(hexaColor)) {\n        this.showUserSelectedColor(hexaColor);\n      }\n      this.pickr.hide();\n    });\n\n    const that = this\n\n    $('input[type=\"text\"].pcr-result').on('keydown', function (e) {\n      if (e.key === 'Enter') {\n        that.pickr.applyColor(false)\n      }\n    })\n  }\n\n  teardownPluginInstance() {\n    this.pickr.destroy()\n  }\n}\n"],"names":["clickShadowField","event","preventDefault","this","shadowFieldTarget","click","Controller","targets","pickImageAndUpload","defaultSources","hasGoogleApiKeyValue","push","options","cloud_name","cloudNameValue","apiKey","apiKeyValue","upload_preset","uploadPresetValue","upload_signature","getCloudinarySignature","bind","multiple","sources","hasSourcesValue","sourcesValue","split","search_by_rights","hasSearchByRightsValue","searchByRightsValue","googleApiKeyValue","cloudinary","openUploadWidget","handleWidgetResponse","clearImage","hiddenFieldTarget","value","removeThumbnail","callback","paramsToSign","$","ajax","url","signaturesUrlValue","type","dataType","data","complete","console","log","success","signature","textStatus","xhr","error","status","response","info","public_id","addThumbnail","urlFormatValue","replace","$imageElement","widthValue","heightValue","identifier","uploadButtonTarget","prepend","classList","add","thumbnailShownClass","hasThumbnailTarget","removeChild","thumbnailTarget","remove","values","signaturesUrl","String","height","Number","width","cloudName","googleApiKey","urlFormat","searchByRights","Boolean","classes","connect","initPluginInstance","colorOptions","colorOptionsTarget","find","map","_","button","attr","get","disconnect","teardownPluginInstance","pickColor","targetEl","target","color","dataset","colorInputTarget","val","colorPickerValueTarget","userSelectedColorTarget","removeClass","pickr","setColor","pickRandomColor","r","Math","floor","random","g","b","hexColor","getColor","toHEXA","toString","showUserSelectedColor","addClass","css","show","unpickColor","hide","togglePickr","Pickr","create","el","theme","useAsButton","default","initialColorValue","components","preview","hue","interaction","input","save","on","_instance","hexaColor","_this","includes","that","e","key","applyColor","destroy","initialColor"],"mappings":"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"}